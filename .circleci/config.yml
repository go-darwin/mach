version: 2.1

orbs:
  golang: cci-orb/golang@volatile
  codecov: codecov/codecov@volatile  # https://circleci.com/developer/orbs/orb/codecov/codecov

executors:
  darwin:
    macos:
      xcode: 12.5.0
    shell: "/bin/bash --login -e -o pipefail"
    environment:
      PATH: /Users/distiller/go/bin:/usr/local/go/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
      GOPATH: /Users/distiller/go
    resource_class: m2.medium
    working_directory: ~/go/src/go-darwin.dev/mach

command_vars:
  - cache_key: &cache_key gomod-{{ checksum "go.sum" }}-{{ checksum "go.mod" }}
  - cache_tools_key: &cache_tools_key tools-{{ checksum "tools/go.sum" }}-{{ checksum "tools/go.mod" }}

commands:
  restore_dependencies:
    steps:
      - restore_cache:
          name: "Restore module dependencies cache"
          keys:
            - *cache_key
      - restore_cache:
          name: "Restore dependencies tools"
          keys:
            - *cache_tools_key

  save_dependencies:
    steps:
      - save_cache:
          name: "Save module cache"
          key: *cache_key
          paths:
            - ~/go/pkg/mod/cache
      - save_cache:
          name: "Save tools cache"
          key: *cache_tools_key
          paths:
            - ~/go/src/go-darwin.dev/mach/tools/bin
      - persist_to_workspace:
          name: "Persist vendor directory and dependencies tools"
          root: "~/go"
          paths:
            - src/go-darwin.dev/mach/tools/bin
            - pkg/mod/cache

  store_test_results_artifacts:
    parameters:
      path:
        description: "test results path"
        type: string
    steps:
      - store_test_results:
          path: "<< parameters.path >>"
      - store_artifacts:
          path: "<< parameters.path >>"

jobs:
  tools:
    executor: darwin
    steps:
      - run:
          name: Set maxfiles and maxprocs
          command: |
            sudo /bin/launchctl limit maxfiles 10485760 10485760
            sudo /bin/launchctl limit maxproc 2048 2048
      - checkout
      - golang/install:
          version: 1.16.5
      - restore_dependencies
      - run:
          name: "Download project modules"
          command: |
            go mod download
      - run:
          name: "Download project tool dependencies"
          command: |
            if [ -z $(find ~/go/src/go-darwin.dev/mach/tools/bin/ -mindepth 1 -type f | head -1) ]; then
              make tools
            fi
      - save_dependencies

  test:
    executor: darwin
    steps:
      - run:
          name: Show versions
          command: |
            uname -a
            sw_vers
            xcodebuild -version
            system_profiler SPHardwareDataType
      - run:
          name: Set maxfiles and maxprocs
          command: |
            sudo /bin/launchctl limit maxfiles 10485760 10485760
            sudo /bin/launchctl limit maxproc 2048 2048
      - checkout
      - attach_workspace:
          name: "Attach vendor directory and dependencies tools"
          at: "~/go"
      - golang/install:
          version: 1.16.5
      - run:
          name: "go mod tidy"
          command: |
            go mod tidy
            go mod vendor
      - run:
          name: "Run test and collect coverages"
          command: |
            mkdir -p /tmp/test-results
            make coverage
          environment:
            GOTESTSUM_FORMAT: standard-verbose
            GOTESTSUM_JUNITFILE: /tmp/test-results/tests.xml
            GOTESTSUM_JSONFILE: /tmp/test-results/tests.json
      - codecov/upload:
          file: coverage.out
      - store_test_results_artifacts:
          path: /tmp/test-results

  lint:
    executor: darwin
    steps:
      - run:
          name: Set maxfiles and maxprocs
          command: |
            sudo /bin/launchctl limit maxfiles 10485760 10485760
            sudo /bin/launchctl limit maxproc 2048 2048
      - checkout
      - attach_workspace:
          name: "Attach vendor directory and dependencies tools"
          at: "~/go"
      - golang/install:
          version: 1.16.5
      - run:
          name: "go mod tidy"
          command: |
            go mod tidy -v
            go mod vendor
      - run:
          name: Run lint for sources
          command: |
            make lint

workflows:
  version: 2
  workflows:
    jobs:
      - tools:
          context: org-global
      - test:
          context: org-global
          requires:
            - tools
      - lint:
          context: org-global
          requires:
            - tools
